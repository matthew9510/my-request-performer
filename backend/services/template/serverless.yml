service: template
app: ${file(../../serverless.yml):app}
org: ${file(../../serverless.yml):org}

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: ${self:provider.environment.RUNTIME}
  region: us-west-2
  stackName: ${self:app}-${self:service}-${self:provider.stage}
  apiName: ${self:app}-${self:service}-${self:provider.stage}
  profile: default
  stage: ${opt:stage, 'dev'}
  stackTags:
    PROJECT: ${self:app}
    STAGE: ${self:provider.stage}

  # profile: ${self:org}
  environment:
    RUNTIME: ${file(../../serverless.yml):provider.environment.runtime}
    DYNAMODB_TABLE: ${self:app}-${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  endpoints:
    name: ${self:app}-${self:service}-${self:provider.stage}
    handler: src/index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
    layers:
      - arn:aws:lambda:us-west-2:418615587574:layer:my-request-libraries:3

resources:
  Resources:
    myDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
outputs:
  TableName: ${self:provider.environment.DYNAMODB_TABLE}
