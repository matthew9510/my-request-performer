service: events

app: my-request
org: ssfdev

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-west-2
  stackName: ${self:app}-${self:service}-${self:provider.stage}
  apiName: ${self:app}-${self:service}-${self:provider.stage}
  profile: default
  stage: ${opt:stage, 'dev'}
  stackTags:
    PROJECT: ${self:app}
    STAGE: ${self:provider.stage}
  environment:
    DYNAMODB_TABLE: ${self:app}-${self:service}-${self:provider.stage}
    DYNAMODB_REQUESTS_TABLE: my-request-requests-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  endpoints:
    name: ${self:app}-${self:service}-${self:provider.stage}
    handler: src/index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          # authorizer:
          #   name: cognito-pool-auth
          #   arn: arn:aws:cognito-idp:us-west-2:418615587574:userpool/us-west-2_cyimjlwtU
          # cors: # removed true
          #   origin: '*' # <-- Specify allowed origin
          #   headers: # <-- Specify allowed headers
          #     - Content-Type
          #     - X-Amz-Date
          #     - Authorization
          #     - X-Api-Key
          #     - X-Amz-Security-Token
          #     - X-Amz-User-Agent
    layers:
      - arn:aws:lambda:us-west-2:418615587574:layer:my-request-libraries:4
    role: arn:aws:iam::418615587574:role/events-dev-us-west-2-lambdaRole

resources:
  Resources:
    myDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: performerId
            AttributeType: S
          - AttributeName: date

            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: performerId-date-index
            KeySchema:
              - AttributeName: performerId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    # GatewayResponseDefault4XX:
    #   Type: 'AWS::ApiGateway::GatewayResponse'
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #       gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    #     ResponseType: DEFAULT_4XX
    #     RestApiId: "9kwwlfe0x0"
    # GatewayResponseDefault5XX:
    #   Type: 'AWS::ApiGateway::GatewayResponse'
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #       gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
    #     ResponseType: DEFAULT_5XX
    #     RestApiId: "9kwwlfe0x0"
custom:
  apiEndpoint:
    Fn::Join:
      - ""
      - - "https://"
        - Ref: "ApiGatewayRestApi"
        - ".execute-api."
        - ${self:provider.region}.
        - Ref: "AWS::URLSuffix"
        - "/"
        - ${self:provider.stage}
        - "/"

outputs:
  TableName: ${self:provider.environment.DYNAMODB_TABLE}
  URL: ${self:custom.apiEndpoint}
